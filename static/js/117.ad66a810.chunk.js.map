{"version":3,"file":"static/js/117.ad66a810.chunk.js","mappings":"oNAGMA,EAAe,SAACC,GAIpB,MADW,mEACDC,KAAKD,IAAyB,IAAhBA,EAAKE,MAC9B,EAEKC,EAAW,CACf,KACA,QACA,OACA,iDACA,sCACA,YACA,UACA,oBACA,kDACA,iBACA,qBACA,OACA,QACA,gCACA,UA6DF,EAxCkB,WAChB,IAGA,GAA0BC,EAAAA,EAAAA,UAAS,GAAnC,eAAOC,EAAP,KAAYC,EAAZ,KACA,GAAiCF,EAAAA,EAAAA,UAASD,EAASE,IAAnD,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA2BJ,EAAAA,EAAAA,UAASD,EAASE,GAAKH,QAAlD,eAAOO,EAAP,KAAaC,EAAb,KACA,GAAgCN,EAAAA,EAAAA,WAAS,GAAzC,eAAOO,EAAP,KAAiBC,EAAjB,KAkBA,OA3CkB,SAACC,EAAUC,GAC7B,IAAMC,GAAgBC,EAAAA,EAAAA,WAEtBC,EAAAA,EAAAA,YAAU,WACRF,EAAcG,QAAUL,CACzB,GAAE,CAACA,KAEJI,EAAAA,EAAAA,YAAU,WACR,GAAIH,EAAO,CACT,IAAMK,EAAKC,aAAY,WACrBL,EAAcG,SACf,GAAEJ,GACH,OAAO,kBAAMO,cAAcF,EAApB,CACR,CACD,OAAO,WAAQ,CAChB,GAAE,CAACL,GACL,CAWCQ,EAAY,WACV,IAAIC,EAASlB,EACTmB,EAAUf,EACVA,EAXO,IAWQN,EAASE,GAAKH,SAC/BqB,GAAU,EACVC,EAAU,GAERD,IAAWpB,EAASD,OACtBU,GAAY,IAEZJ,EAAcL,EAASoB,GAAQE,MAAM,EAAGD,IACxClB,EAAWiB,GACXb,EAAWc,EAAU,GAExB,GAAEb,EArBW,GAqBQ,OAGpB,gBACEe,UAAU,mBACVC,MAAO5B,EAAaQ,GAAW,CAAC,EAAI,CAAEqB,MAAO,OAC7CC,aAAc,kBAAMjB,GAAY,EAAlB,EACdkB,aAAc,kBAAOzB,EAAMF,EAASD,QAAWU,GAAY,EAA7C,EAJhB,UAME,eAAGmB,KAAMhC,EAAaQ,GAAW,4BAA8B,GAA/D,WACE,0BAAOA,KACP,0CAIP,E,UC5EKyB,GAAiBC,E,QAAAA,GAAyB,WAsBhD,EApBgB,kBACd,SAACC,EAAA,EAAD,CACEC,MAAM,UACNC,YAAY,kDAFd,UAIE,qBAASV,UAAU,OAAOP,GAAG,UAA7B,WACE,6BACE,gBAAKO,UAAU,QAAf,UACE,eAAI,cAAY,UAAhB,UAA0B,SAAC,KAAD,CAAMW,GAAG,WAAWC,QAAS,kBAAMN,EAAe,UAArB,EAA7B,4BAG9B,iBAAKN,UAAU,WAAf,WACE,wDACA,SAAC,EAAD,QAEF,SAACa,EAAA,EAAD,QAfU,C","sources":["components/Contact/EmailLink.js","pages/Contact.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\n// Validates the first half of an email address.\r\nconst validateText = (text) => {\r\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\r\n  // eslint-disable-next-line no-useless-escape\r\n  const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\r\n  return re.test(text) || text.length === 0;\r\n};\r\n\r\nconst messages = [\r\n  'hi',\r\n  'hello',\r\n  'hola',\r\n  'you-can-email-me-at-literally-anything! Really',\r\n  'well, not anything. But most things',\r\n  'like-this',\r\n  'or-this',\r\n  'but not this :(  ',\r\n  'you.can.also.email.me.with.specific.topics.like',\r\n  'just-saying-hi',\r\n  'please-work-for-us',\r\n  'help',\r\n  'admin',\r\n  'or-I-really-like-your-website',\r\n  'thanks',\r\n];\r\n\r\nconst useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const id = setInterval(() => {\r\n        savedCallback.current();\r\n      }, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n    return () => {}; // pass linter\r\n  }, [delay]);\r\n};\r\n\r\nconst EmailLink = () => {\r\n  const hold = 50; // ticks to wait after message is complete before rendering next message\r\n  const delay = 50; // tick length in mS\r\n\r\n  const [idx, updateIter] = useState(0); // points to current message\r\n  const [message, updateMessage] = useState(messages[idx]);\r\n  const [char, updateChar] = useState(messages[idx].length); // points to current char\r\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\r\n\r\n  useInterval(() => {\r\n    let newIdx = idx;\r\n    let newChar = char;\r\n    if (char - hold >= messages[idx].length) {\r\n      newIdx += 1;\r\n      newChar = 0;\r\n    }\r\n    if (newIdx === messages.length) {\r\n      setIsActive(false);\r\n    } else {\r\n      updateMessage(messages[newIdx].slice(0, newChar));\r\n      updateIter(newIdx);\r\n      updateChar(newChar + 1);\r\n    }\r\n  }, isActive ? delay : null);\r\n\r\n  return (\r\n    <div\r\n      className=\"inline-container\"\r\n      style={validateText(message) ? {} : { color: 'red' }}\r\n      onMouseEnter={() => setIsActive(false)}\r\n      onMouseLeave={() => (idx < messages.length) && setIsActive(true)}\r\n    >\r\n      <a href={validateText(message) ? 'mailto:xingcw61@gmail.com' : ''}>\r\n        <span>{message}</span>\r\n        <span>@xingcw</span>\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmailLink;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Main from '../layouts/Main';\r\nimport EmailLink from '../components/Contact/EmailLink';\r\nimport ContactIcons from '../components/Contact/ContactIcons';\r\nimport useAnalyticsEventTracker from '../tracker/userAnalyticsEventTracker';\r\n\r\nconst gaEventTracker = useAnalyticsEventTracker('Contact');\r\n\r\nconst Contact = () => (\r\n  <Main\r\n    title=\"Contact\"\r\n    description=\"Contact Chunwei Xing via email @ chxing@ethz.ch\"\r\n  >\r\n    <article className=\"post\" id=\"contact\">\r\n      <header>\r\n        <div className=\"title\">\r\n          <h2 data-testid=\"heading\"><Link to=\"/contact\" onClick={() => gaEventTracker('contact')}>Contact</Link></h2>\r\n        </div>\r\n      </header>\r\n      <div className=\"email-at\">\r\n        <p>Feel free to get in touch. </p>\r\n        <EmailLink />\r\n      </div>\r\n      <ContactIcons />\r\n    </article>\r\n  </Main>\r\n);\r\n\r\nexport default Contact;\r\n"],"names":["validateText","text","test","length","messages","useState","idx","updateIter","message","updateMessage","char","updateChar","isActive","setIsActive","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","newIdx","newChar","slice","className","style","color","onMouseEnter","onMouseLeave","href","gaEventTracker","useAnalyticsEventTracker","Main","title","description","to","onClick","ContactIcons"],"sourceRoot":""}